#include <stdio.h>
#include <stdlib.h>
#include <iostream>

// Функция на нахождения всех ребер, смежных к вершинам с заданной степенью вершины
// @param s1 кол-во вершин
// @param s2 кол-во '-' и '>' в строке a
// @param a строка ввода
// @param b строка с вершинами
// @param s3 выбор пользователя степени вершины
int function(int s1, int s2, char *a, char *b, int s3){
    if(s2%2 != 0){
        return 1;
    }
    char names[s1];
    for(int i=0 ;i<s1; i++){
        names[i] = 0;
    }

    int i=0, n=0;
    while (b[i] != '\n'){
        int k=0;
        for(int j=0; j<s1; j++){
            if(names[j] == b[i]){
                k=1;
            }
        }
        if(k==0){
            names[n] = b[i];
            n++;
        }
        i++;
    }

    int num_stepen[s1];
    for(int i=0 ;i<s1; i++){
        num_stepen[i] = 0;
    }

    i=0;
    int flag1=0, flag2=0;
    while (a[i] != '\n'){
        if(a[i] != '-' && a[i] != '>' && a[i] != ' ' && a[i] != ';'){
            int n = i;
            while(a[n] != ';' && a[n] != '\n'){
                if(a[n] == '-' || a[n] == '>'){
                    flag2++;
                }
                n++;
            }
            if(flag2 == 2 || flag1 == 1){
                flag1 = 1;
                flag2 = 0;
                for(int j=0; j<s1; j++){
                    if(a[i] == names[j]){
                        num_stepen[j]++;
                    }
                }

            } else if (flag2 == 1){
                return 1;
            }
        } else if(a[i] == ';'){
            flag1 = 0;
        }

        i++;
    }

    i=0;
    flag1 = 0;
    flag2 = 0;
    while (a[i] != '\n'){
        if(a[i] != '-' && a[i] != '>' && a[i] != ' ' && a[i] != ';'){
            if(flag1 == 0){
                int temp_j = 0;
                for(int j=0; j<s1; j++){
                    if(a[i] == names[j]){
                        temp_j = j;
                    }
                }
                if(num_stepen[temp_j] == s3){
                    int k = i;
                    while (a[k] != ';' && a[k] != '\n'){
                        printf("%c",a[k]);
                        k++;
                    }
                    printf("; ");
                }
                flag1 = 1;
            } else if(flag1 == 1 && flag2 == 1) {
                int temp_j=0;
                for(int j=0; j<s1; j++){
                    if(a[i] == names[j]){
                        temp_j = j;
                    }
                }
                if(num_stepen[temp_j] == s3){
                    char temp_string[32] = {0};
                    int k = i;
                    while (a[k] != ';' && k!=-1){
                        temp_string[i-k] = a[k];
                        k--;
                    }
                    for(int l=i-k; l>=0; l--){
                        printf("%c",temp_string[l]);
                    }
                    printf("; ");
                }
                flag1 = 1;
            }
            flag2 = 1;
        } else if(a[i] == ';'){
            flag1 = 0;
            flag2 = 0;
        }

        i++;
    }




    return 0;
}


int main() {
    setlocale (LC_ALL, "Russian");
    int s1 = 0, s2 = 0, f, j = 0, k = 0, h = 0, q = 0, i = 0;
    char n = 0, m;
    char *a = NULL, *b = NULL;
    FILE *graphfile = fopen("graphfile.dot", "w");
    if (graphfile == NULL) {
        printf("Файл не открыт");
        exit(0);
    } else {
        printf("Ваш Граф: \n1.Неориентированный \n2.Ориентированный\n");
        m = (char) getchar();
        switch (m) {
        case 49:
            fputs("graph G { ", graphfile);
            break;
        case 50:
            fputs("digraph G { ", graphfile);
            break;
        default:

            printf("Ошибка\n");
            exit(0);


        }
        printf("Граф является простым: \n1.Да \n2.Нет \n");
        scanf("%d",&f);
        switch (f) {
        case 1:
            {
                printf("Опишите граф: \n");

                getchar();
                while (n != '\n')
                {
                    n = (char) getchar();
                    if (n=='-' || n=='>'){
                        s2++;
                    }
                    if (n!='-' && n!=' ' && n!='>' && n!=';'){
                    b = (char *) realloc(b, (j + 1) * sizeof(char));
                    b[j] = n;
                    j++;
                    }
                    a = (char *) realloc(a, (i + 1) * sizeof(char));
                    a[i] = n;
                       i++;
                }
            for (k = 0 ; k < j-1; k++){
                printf ("%c",b[k]);
                q=0;
                for (h = k+1; h<j; h++){
                    if (b[k] == b[h]){
                        q=1;
                    }
                }
                if (q==0){
                    s1++;
                }
            }
            printf ("\n");
            for (int tmp = 0; tmp < i; tmp++)
            {
                putc(a[tmp], graphfile);
            }
                float x = 0, y=0;
            y=s2/2;
            x=((s1-1)*(s1-2))/2;
            if (y > x){
                   printf("Граф является связным.\n ");
            }
            else {
                printf("Граф не является связным.\n ");
            }
                int s3 = 0;
                printf("Задайте степень вершины, ребра которых вы хотите вывести:\n");
                scanf("%d",&s3);
                if(function(s1, s2, a, b, s3) == 1){
                    printf("Синтаксическая ошибка:\n");
                }
                printf("\n");
            break;
            }
            case 2:
                {
                printf("Опишите граф\n");
                getchar();
                while (n != '\n')
                {
                    n = (char) getchar();
                    a = (char *) realloc(a, (i + 1) * sizeof(char));
                    a[i] = n;
                    i++;
                }
                for (int tmp = 0; tmp < i; tmp++)
                {
                    putc(a[tmp], graphfile);
                }
                break;
                }
            default:
            printf("Ошибка\n");
            exit(0);
        }

    fputs(" }", graphfile);
    fclose(graphfile);
    //system("\\Users\\ALEX\\Desktop\\release\\bin\\gvedit.exe graphfile.dot");
        }
    }
